{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\HP\\\\Desktop\\\\chat-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\HP\\\\Desktop\\\\chat-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\HP\\\\Desktop\\\\chat-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\HP\\\\Desktop\\\\chat-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\chat-app\\\\src\\\\context\\\\GlobalState.js\";\nimport React, { useReducer } from 'react';\nimport getRandomColor from '../utils/getRandomColor';\nimport firestore from '../firebase';\nimport { roomsReducer, selectRoomReducer, messagesReducer, userReducer, ADD_ROOMS, SELECT_ROOM, SET_MESSAGES, CLEAR_MESSAGES, SET_USER } from './reducers';\nexport var Context = React.createContext();\n\nvar GlobalState = function GlobalState(_ref) {\n  var children = _ref.children;\n\n  // set global state\n  var _useReducer = useReducer(userReducer, {}),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      user = _useReducer2[0],\n      setUser = _useReducer2[1];\n\n  var _useReducer3 = useReducer(roomsReducer, []),\n      _useReducer4 = _slicedToArray(_useReducer3, 2),\n      roomsState = _useReducer4[0],\n      setRooms = _useReducer4[1];\n\n  var _useReducer5 = useReducer(selectRoomReducer, {}),\n      _useReducer6 = _slicedToArray(_useReducer5, 2),\n      openRoom = _useReducer6[0],\n      setOpenRoom = _useReducer6[1];\n\n  var _useReducer7 = useReducer(messagesReducer, []),\n      _useReducer8 = _slicedToArray(_useReducer7, 2),\n      messages = _useReducer8[0],\n      setMessages = _useReducer8[1];\n\n  var setSetUser =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(user) {\n      var userInfo, doc;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return firestore.collection('users').add({\n                name: user,\n                color: getRandomColor(1)[0]\n              });\n\n            case 2:\n              userInfo = _context.sent;\n              _context.next = 5;\n              return userInfo.get();\n\n            case 5:\n              doc = _context.sent;\n              setUser({\n                type: SET_USER,\n                payload: _objectSpread({\n                  id: doc.id\n                }, doc.data())\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function setSetUser(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // define actions\n\n\n  var addRooms = function addRooms(rooms) {\n    firestore.collection('rooms').onSnapshot(function (snapshot) {\n      var changes = snapshot.docChanges();\n      var snapArray = changes.map(function (item) {\n        return {\n          id: item.doc.id,\n          name: item.doc.data().name\n        };\n      });\n      setRooms({\n        type: ADD_ROOMS,\n        rooms: snapArray\n      });\n    });\n  };\n\n  var selectRoom = function selectRoom(id) {\n    var room = roomsState.find(function (item) {\n      return item.id === id;\n    });\n    setOpenRoom({\n      type: SELECT_ROOM,\n      payload: room\n    });\n  };\n\n  var setMessagesReducer = function setMessagesReducer(messageArray, cb) {\n    setMessages({\n      type: SET_MESSAGES,\n      payload: messageArray\n    });\n    cb();\n  };\n\n  var clearMessages = function clearMessages() {\n    setMessages({\n      type: CLEAR_MESSAGES\n    });\n  };\n\n  var addSingleRoom = function addSingleRoom(name) {\n    firestore.collection('rooms').add({\n      name: name\n    });\n  };\n\n  var sendMessage =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(input) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              firestore.collection('rooms').doc(openRoom.id).collection('messages').add({\n                author: user,\n                text: input,\n                date: Date.now()\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendMessage(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Context.Provider, {\n    value: {\n      user: user,\n      rooms: roomsState,\n      openRoom: openRoom,\n      addRooms: addRooms,\n      addSingleRoom: addSingleRoom,\n      selectRoom: selectRoom,\n      messages: messages,\n      sendMessage: sendMessage,\n      clearMessages: clearMessages,\n      setMessagesReducer: setMessagesReducer,\n      setSetUser: setSetUser\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, children);\n};\n\nexport default GlobalState;","map":{"version":3,"sources":["C:\\Users\\HP\\Desktop\\chat-app\\src\\context\\GlobalState.js"],"names":["React","useReducer","getRandomColor","firestore","roomsReducer","selectRoomReducer","messagesReducer","userReducer","ADD_ROOMS","SELECT_ROOM","SET_MESSAGES","CLEAR_MESSAGES","SET_USER","Context","createContext","GlobalState","children","user","setUser","roomsState","setRooms","openRoom","setOpenRoom","messages","setMessages","setSetUser","collection","add","name","color","userInfo","get","doc","type","payload","id","data","addRooms","rooms","onSnapshot","snapshot","changes","docChanges","snapArray","map","item","selectRoom","room","find","setMessagesReducer","messageArray","cb","clearMessages","addSingleRoom","sendMessage","input","author","text","date","Date","now"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\n\r\nimport getRandomColor from '../utils/getRandomColor';\r\nimport firestore from '../firebase';\r\nimport { \r\n  roomsReducer, \r\n  selectRoomReducer, \r\n  messagesReducer, \r\n  userReducer,\r\n  ADD_ROOMS, SELECT_ROOM, SET_MESSAGES, CLEAR_MESSAGES, SET_USER\r\n} from './reducers';\r\n\r\nexport const Context = React.createContext();\r\n\r\nconst GlobalState = ({ children }) => {\r\n  // set global state\r\n  const [user, setUser] = useReducer(userReducer, {});\r\n  const [roomsState, setRooms] = useReducer(roomsReducer, []);\r\n  const [openRoom, setOpenRoom] = useReducer(selectRoomReducer, {});\r\n  const [messages, setMessages] = useReducer(messagesReducer, []);\r\n\r\n  const setSetUser = async user => {\r\n    const userInfo = await firestore.collection('users').add({\r\n      name: user,\r\n      color: getRandomColor(1)[0]\r\n    })\r\n    const doc = await userInfo.get();\r\n    setUser({type: SET_USER, payload: {id: doc.id, ...doc.data()}})\r\n  }\r\n\r\n  // define actions\r\n  const addRooms = (rooms) => {\r\n    firestore.collection('rooms').onSnapshot((snapshot) => {\r\n      const changes = snapshot.docChanges();\r\n      const snapArray = changes.map(item => ({id: item.doc.id, name: item.doc.data().name}));\r\n      setRooms({type: ADD_ROOMS, rooms: snapArray})\r\n    });\r\n  }\r\n\r\n  const selectRoom = id => {\r\n    const room = roomsState.find(item => item.id === id);\r\n    setOpenRoom({type: SELECT_ROOM, payload: room});\r\n  }\r\n\r\n\r\n  const setMessagesReducer = (messageArray, cb) => {\r\n    setMessages({type: SET_MESSAGES, payload: messageArray});\r\n    cb();\r\n  }\r\n  \r\n  const clearMessages = () => {\r\n    setMessages({type: CLEAR_MESSAGES});\r\n  }\r\n\r\n  const addSingleRoom = (name) => {\r\n    firestore.collection('rooms').add({\r\n      name\r\n    })\r\n  }\r\n\r\n  const sendMessage = async input => {\r\n    firestore.collection('rooms').doc(openRoom.id).collection('messages').add({\r\n      author: user,\r\n      text: input,\r\n      date: Date.now()\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        user,\r\n        rooms: roomsState,\r\n        openRoom,\r\n        addRooms,\r\n        addSingleRoom,\r\n        selectRoom,\r\n        messages,\r\n        sendMessage,\r\n        clearMessages,\r\n        setMessagesReducer,\r\n        setSetUser\r\n      }}\r\n    >\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport default GlobalState;"]},"metadata":{},"sourceType":"module"}